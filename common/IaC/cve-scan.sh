#!/bin/bash
#
# WARNING: Automatically copied from dga-tools
#
# Turn on errors.
set -e
# BASE_DIR is picked up from the location of this script.
BASE_DIR="$( cd -P "$( dirname "$BASH_SOURCE" )" && pwd -P )"
cd "${BASE_DIR}"

# GIT_COMMIT is an environment variable that
# gets set automatically by Jenkins when it
# performs the build.
if [[ -z "${GIT_COMMIT}" ]]; then
  echo "Must specify GIT_COMMIT"
  exit 1
fi

# Set environment variables needed to do our work.
# 
. ./init.sh

ECR="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"

aws ecr get-login-password | docker login --username AWS --password-stdin ${ECR}

# Image scan
#docker push --quiet ${ECR}/temp-${AREA,,}/${DOCKER_REPO}:${GIT_COMMIT}
# Perform CVE scan and iterate until "COMPLETE" status is returned.
TMP_JSON=$(mktemp /tmp/cve_scan_XXXXXX.json)
SCAN_COMPLETE="INCOMPLETE"
while [[ "${SCAN_COMPLETE}" != "COMPLETE" ]]
do
    aws ecr describe-image-scan-findings --repository-name temp-${AREA,,}/${DOCKER_REPO} --image-id imageTag=${GIT_COMMIT} > ${TMP_JSON}
    SCAN_COMPLETE=$(jq -r .imageScanStatus.status ${TMP_JSON})
    sleep 1
done

# Copy TMP_JSON to a standard name/location so that it
# can be stashed as an artifact by Jenkins.
cp ${TMP_JSON} ./cve-scan.json

# Now that complete scan results are available, check for
# vulnerabilities and their levels of severity.  For now,
# we are failing if a non-null number of "HIGH" severity
# counts is found.
CVE_HIGH_SEVERITY_COUNT=$(jq -r .imageScanFindings.findingSeverityCounts.HIGH ${TMP_JSON})
if [[ "${CVE_HIGH_SEVERITY_COUNT}" = "null" ]]
then
    # Passed scan.
    echo "CVE scan detected no high severity vulnerabilities."
    echo "Passed CVE scan."
    # Clean up.
    rm -f ${TMP_JSON}
    exit 0
else
    # Failed scan.
    echo "CVE scan detected ${CVE_HIGH_SEVERITY_COUNT} high severity vulnerabilities."
    echo "Failing due to presence of one or more high-severity CVEs."
    # Clean up.
    rm -f ${TMP_JSON}
    exit 1
fi







    


